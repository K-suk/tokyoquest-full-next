generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ── モデル定義 ──

model User {
  id             String    @id @default(uuid()) @map("user_id")
  name           String?   @map("user_name")
  email          String    @unique
  emailVerified  DateTime? @map("email_verified")
  image          String?
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  exp            Int       @default(0)
  level          Int       @default(0)
  isStaff        Boolean   @default(false) @map("is_staff")
  isActive       Boolean   @default(true) @map("is_active")

  accounts       Account[]
  sessions       Session[]
  completions    QuestCompletion[]
  saved_quests   SavedQuest[]
  reviews        Review[]

  @@map("users")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tag {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description   String?
  created_at  DateTime  @default(now())              @map("created_at")

  quests      Quest[]   @relation("QuestTags")

  @@map("tags")
}

model Quest {
  id            Int                @id @default(autoincrement()) @map("id")
  title         String
  description   String
  tips          String?
  imgUrl        String?            @map("imgUrl")
  location      String
  badget        String?
  date_created  DateTime           @default(now())       @map("date_created")

  tags          Tag[]              @relation("QuestTags")
  completions   QuestCompletion[]
  saved_quests  SavedQuest[]
  reviews       Review[]

  @@map("quests")
  @@index([date_created])
}

model QuestCompletion {
  id              Int      @id @default(autoincrement())
  user            User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id         String   @map("user_id")
  quest           Quest    @relation(fields: [quest_id], references: [id], onDelete: Cascade)
  quest_id        Int      @map("quest_id")
  completion_date DateTime @default(now())        @map("completion_date")
  media           String?

  @@unique([user_id, quest_id])
  @@map("quest_completions")
}

model SavedQuest {
  id       Int      @id @default(autoincrement())
  user     User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id  String   @map("user_id")
  quest    Quest    @relation(fields: [quest_id], references: [id], onDelete: Cascade)
  quest_id Int      @map("quest_id")
  saved_at DateTime @default(now())        @map("saved_at")

  @@unique([user_id, quest_id])
  @@map("saved_quests")
}

model Review {
  id         Int      @id @default(autoincrement())
  quest      Quest    @relation(fields: [quest_id], references: [id], onDelete: Cascade)
  quest_id   Int      @map("quest_id")
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id    String   @map("user_id")
  rating     Int
  comment    String
  created_at DateTime @default(now())        @map("created_at")

  @@map("reviews")
}

model Blog {
  id          Int           @id @default(autoincrement())
  title       String
  thumbnail   String?
  created_at  DateTime      @default(now()) @map("created_at")
  updated_at  DateTime      @updatedAt @map("updated_at")
  is_published Boolean      @default(false) @map("is_published")
  
  contents    BlogContent[]
  
  @@map("blogs")
}

model BlogContent {
  id          Int      @id @default(autoincrement())
  blog_id     Int      @map("blog_id")
  subtitle    String?
  content     String?
  image       String?
  order       Int      @default(0)
  created_at  DateTime @default(now()) @map("created_at")
  
  blog        Blog     @relation(fields: [blog_id], references: [id], onDelete: Cascade)
  
  @@map("blog_contents")
}
